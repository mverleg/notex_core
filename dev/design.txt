

Approach:
- Realize that the main difference between tex and notex is that content is free-flowing
- It's hard to plan everything now, perhaps I should just get started on a quick draft, and then throw out the parts that don't work well.
- Probably need a compiler
  - Also use Angular processing?
  - Use any template language?
- Should the document source be a valid-ish document? Display in any way correctly?
- Should users ever need javascript?
- Figures, tables etc will not be positioned automatically, is that a good thing?
- Page breaking, adding footnotes, etc will be difficult
- Come up with a name
-


Ingredients core:
- Compiler
- Includes (split files)
- Paged vs flow
- Themes (styles & templates)
- graphs (d3, c3)
- Index/ToC
- Variables
- Review mode
- // /* Comments */
Ingredients in separate apps:
- Add-on manager
- Fonts, Kerning etc
- Documentation & examples
- Style guide warnings
Ingredients in addons:
- Citations
- References (id, #)
- Equations (mathjax)
- Images
- Printable
Ingredients probably in addons:
- Single-file flag
- Local vs cdn flag
- Optimize flag
Maybe never:
- Online editor
- Demo website for packages(themes)
- Hosting for documents?


Considerations:
- Package(s) to convert common LaTeX \commands to html
- Package(s) to convert common mistakes http://line25.com/articles/10-html-entity-crimes-you-really-shouldnt-commit
- $\gamma$ for variables and in equations, γ in text or names [isn't this kind of annoying? maybe γ work in mathjax?]
  Google recommends against using entities except the ones that have special html meaning like <>&
- Mathjax at compile time or in client? It's pretty slow (so compile) but behaves differently in different browsers (so client)
- Should people use <article>, <section>? Or should they use <chapter> which I then convert? Or use just headers and add articles automatically?
- Use JS strict mode, but not for entire files https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode
- What about figure/equation/table numbering? CSS can do numbering but no references, so do this in code.
    Including 'only number referenced figures'? And ofc. make clickable links.
- I should list latex complaints to make sure they're actually solved.
- Make all references (fig ref, footnote, citation) clickable/hoverable to reveal the full target so you never have to search.
- Should citations still use tex? http://tex.stackexchange.com/questions/11516/alternatives-to-bibtex2html (add hrefs though, this is the 21st century)?
    A custom templating engine would work quite well for bibliography.
- Should self-contained version of document with multiple chapters be a SPA?
    It's pretty much the only way; should there be url updates and everything?
- addons installed in addons/name/v1.0 where 1.0.2 is expected to be just bugfixes for 1.0.1 (and so the latest 1.0.* is always used)
    They're hosted on a server anyway so might as well use that as a cdn.
- Security warning about blindly pasting documents on your website.
- How do themes (book template, crimson style) relate to display modes (print version, paged vs flow, ..)
    Also night mode, contrast mode, ...
- Remember document position using url hash as well as cookie
- What to do with versions? Have compiler & addon versions, with the option of using old ones?
    It'll still look different in different browsers though
- Might be good to create a few javascript events:
    http://www.kirupa.com/html5/custom_events_js.htm
- Should there be pdf versions? Or is printable & standalone enough?
- Include source in output by default? Sensitive comments...
- How can modules e.g. replace tags? There must be a compiler hook somewhere
- Recommended to split packages into small subpackages (using the main one just to require others), so that tags can be individually turned off. Or use options I guess.
- Soup compiler only, people can easily add Angular directives by themselves (even through the compiler)
- Make a few good example documents (article, letter, CV ...) so people can 1) see how to structure such a document 2) find examples of specific tag usage
-


Resources:
- kerning: http://blog.typekit.com/2014/02/05/kerning-on-the-web/
- inline images have size limit: http://www.websiteoptimization.com/speed/tweak/inline-images/
- tags: https://developer.mozilla.org/en/docs/Web/HTML/Element
-

Apps:
- bootstrap, angular, etc
- old browser warnings
-

